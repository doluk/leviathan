from typing import TypeVar, TypeVarTuple, Callable, Self, Optional, Unpack
from contextvars import Context
import asyncio

_T = TypeVar('_T')

class Future(asyncio.Future[_T]):
	def __init__(self, loop: asyncio.AbstractEventLoop) -> None: ...
	def result(self) -> _T: ...
	def set_result(self, value: _T) -> None: ...
	def exception(self) -> Optional[BaseException]: ...
	def set_exception(self, exception: type|BaseException) -> None: ...
	def done(self) -> bool: ...
	def cancel(self, msg: Optional[str] = None) -> bool: ...
	def cancelled(self) -> bool: ...
	def add_callback(self, callback: Callable[[Self], None]) -> None: ...
	def remove_callback(self, callback: Callable[[Self], None]) -> int: ...
	def get_loop(self) -> asyncio.AbstractEventLoop: ...


_Tcs = TypeVarTuple("_Tcs")


class Loop(asyncio.AbstractEventLoop):
	def __init__(self, ready_tasks_queue_min_bytes_capacity: int,
			  exception_handler: Callable[[Exception], None]) -> None: ...
	def run_forever(self) -> None: ...
	def stop(self) -> None: ...
	def is_running(self) -> bool: ...
	def is_closed(self) -> bool: ...
	def close(self) -> None: ...
	def call_soon(self, callback: Callable[[Unpack[_Tcs]], object],
			   *args: Unpack[_Tcs], context: Context | None = ...) -> asyncio.Handle: ...
