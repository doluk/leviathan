from typing import Any, TypeVar, Generic

_T = TypeVar('_T')

class Future(Generic[_T]):
	def result(self) -> _T: ...
	def set_result(self, value: _T) -> None: ...
	def done(self) -> bool: ...
	def cancel(self) -> None: ...
	def cancelled(self) -> bool: ...

class Handle:
	...

class Loop:
	def __init__(self, ready_tasks_queue_min_bytes_capacity: int, thread_safe: bool) -> None: ...
	def run_forever(self) -> None: ...
	def stop(self) -> None: ...
	def is_running(self) -> bool: ...
	def is_closed(self) -> bool: ...
	def close(self) -> None: ...
	def _call_soon(self, handle: Handle) -> None: ...
